# Generated by Django 4.2.17 on 2025-01-05 01:19

import django.db.models.deletion
import djmoney.models.fields
import djmoney.models.validators
import taggit.managers
from django.conf import settings
from django.db import migrations, models

import InvenTree.fields


class Migration(migrations.Migration):
    replaces = [
        ("company", "0051_alter_supplierpricebreak_price"),
        ("company", "0052_alter_supplierpricebreak_updated"),
        ("company", "0053_supplierpart_updated"),
        ("company", "0054_companyattachment"),
        ("company", "0055_auto_20230317_0816"),
        ("company", "0056_alter_company_notes"),
        ("company", "0057_auto_20230427_2033"),
        ("company", "0058_auto_20230515_0004"),
        ("company", "0059_supplierpart_pack_units"),
        ("company", "0060_auto_20230519_0344"),
        ("company", "0061_remove_supplierpart_pack_size"),
        ("company", "0062_contact_metadata"),
        ("company", "0063_auto_20230502_1956"),
        ("company", "0064_move_address_field_to_address_model"),
        ("company", "0065_remove_company_address"),
        ("company", "0066_auto_20230616_2059"),
        ("company", "0067_alter_supplierpricebreak_price_currency"),
        ("company", "0068_auto_20231120_1108"),
        ("company", "0069_company_active"),
    ]

    dependencies = [
        ("part", "0111_auto_20230521_1350"),
        ("stock", "0094_auto_20230220_0025"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("common", "0004_inventreesetting"),
        ("taggit", "0005_auto_20220424_2025"),
        ("company", "0050_alter_company_website"),
    ]

    operations = [
        migrations.AlterField(
            model_name="supplierpricebreak",
            name="updated",
            field=models.DateTimeField(
                auto_now=True,
                help_text="Timestamp of last update",
                null=True,
                verbose_name="Updated",
            ),
        ),
        migrations.AddField(
            model_name="supplierpart",
            name="updated",
            field=models.DateTimeField(
                auto_now=True,
                help_text="Timestamp of last update",
                null=True,
                verbose_name="Updated",
            ),
        ),
        migrations.CreateModel(
            name="CompanyAttachment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "attachment",
                    models.FileField(
                        blank=True,
                        help_text="Select file to attach",
                        null=True,
                        upload_to="attachments",
                        verbose_name="Attachment",
                    ),
                ),
                (
                    "link",
                    InvenTree.fields.InvenTreeURLField(
                        blank=True,
                        help_text="Link to external URL",
                        null=True,
                        verbose_name="Link",
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True,
                        help_text="File comment",
                        max_length=100,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "upload_date",
                    models.DateField(
                        auto_now_add=True, null=True, verbose_name="upload date"
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="company.company",
                        verbose_name="Company",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="manufacturerpart",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AddField(
            model_name="supplierpart",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AlterField(
            model_name="company",
            name="notes",
            field=InvenTree.fields.InvenTreeNotesField(
                blank=True,
                help_text="Markdown notes (optional)",
                max_length=50000,
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AddField(
            model_name="manufacturerpart",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="supplierpart",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="supplierpart",
            name="pack_quantity",
            field=models.CharField(
                blank=True,
                help_text="Total quantity supplied in a single pack. Leave empty for single items.",
                max_length=25,
                verbose_name="Pack Quantity",
            ),
        ),
        migrations.AddField(
            model_name="supplierpart",
            name="pack_quantity_native",
            field=InvenTree.fields.RoundingDecimalField(
                decimal_places=10, default=1, max_digits=20, null=True
            ),
        ),
        migrations.AlterField(
            model_name="supplierpricebreak",
            name="price",
            field=InvenTree.fields.InvenTreeModelMoneyField(
                currency_choices=[],
                decimal_places=6,
                default_currency="",
                help_text="Unit price at specified quantity",
                max_digits=19,
                null=True,
                validators=[djmoney.models.validators.MinMoneyValidator(0)],
                verbose_name="Price",
            ),
        ),
        migrations.RemoveField(
            model_name="supplierpart",
            name="pack_size",
        ),
        migrations.AddField(
            model_name="contact",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title describing the address entry",
                        max_length=100,
                        verbose_name="Address title",
                    ),
                ),
                (
                    "primary",
                    models.BooleanField(
                        default=False,
                        help_text="Set as primary address",
                        verbose_name="Primary address",
                    ),
                ),
                (
                    "line1",
                    models.CharField(
                        blank=True,
                        help_text="Address line 1",
                        max_length=50,
                        verbose_name="Line 1",
                    ),
                ),
                (
                    "line2",
                    models.CharField(
                        blank=True,
                        help_text="Address line 2",
                        max_length=50,
                        verbose_name="Line 2",
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True,
                        help_text="Postal code",
                        max_length=10,
                        verbose_name="Postal code",
                    ),
                ),
                (
                    "postal_city",
                    models.CharField(
                        blank=True,
                        help_text="Postal code city",
                        max_length=50,
                        verbose_name="City",
                    ),
                ),
                (
                    "province",
                    models.CharField(
                        blank=True,
                        help_text="State or province",
                        max_length=50,
                        verbose_name="State/Province",
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        blank=True,
                        help_text="Address country",
                        max_length=50,
                        verbose_name="Country",
                    ),
                ),
                (
                    "shipping_notes",
                    models.CharField(
                        blank=True,
                        help_text="Notes for shipping courier",
                        max_length=100,
                        verbose_name="Courier shipping notes",
                    ),
                ),
                (
                    "internal_shipping_notes",
                    models.CharField(
                        blank=True,
                        help_text="Shipping notes for internal use",
                        max_length=100,
                        verbose_name="Internal shipping notes",
                    ),
                ),
                (
                    "link",
                    InvenTree.fields.InvenTreeURLField(
                        blank=True,
                        help_text="Link to address information (external)",
                        verbose_name="Link",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        help_text="Select company",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="addresses",
                        to="company.company",
                        verbose_name="Company",
                    ),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="company",
            name="address",
        ),
        migrations.AlterModelOptions(
            name="address",
            options={"verbose_name": "Address", "verbose_name_plural": "Addresses"},
        ),
        migrations.AlterField(
            model_name="address",
            name="postal_city",
            field=models.CharField(
                blank=True,
                help_text="Postal code city/region",
                max_length=50,
                verbose_name="City/Region",
            ),
        ),
        migrations.AlterField(
            model_name="supplierpricebreak",
            name="price_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AddField(
            model_name="manufacturerpart",
            name="barcode_data",
            field=models.CharField(
                blank=True,
                help_text="Third party barcode data",
                max_length=500,
                verbose_name="Barcode Data",
            ),
        ),
        migrations.AddField(
            model_name="manufacturerpart",
            name="barcode_hash",
            field=models.CharField(
                blank=True,
                help_text="Unique hash of barcode data",
                max_length=128,
                verbose_name="Barcode Hash",
            ),
        ),
        migrations.AddField(
            model_name="company",
            name="active",
            field=models.BooleanField(
                default=True, help_text="Is this company active?", verbose_name="Active"
            ),
        ),
        migrations.AddField(
            model_name="supplierpart",
            name="active",
            field=models.BooleanField(
                default=True,
                help_text="Is this supplier part active?",
                verbose_name="Active",
            ),
        ),
    ]
