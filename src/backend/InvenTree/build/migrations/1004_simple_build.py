# Generated by Django 4.2.17 on 2025-01-04 14:52

import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import logging
import build.status_codes

logger = logging.getLogger("inventree")


def add_build_line_links(apps, schema_editor):
    """Data migration to add links between BuildLine and BuildItem objects.

    Associated model types:
        Build: A "Build Order"
        BomItem: An individual line in the BOM for Build.part
        BuildItem: An individual stock allocation against the Build Order
        BuildLine: (new model) an individual line in the Build Order

    Goals:
        - Find all BuildItem objects which are associated with a Build
        - Link them against the relevant BuildLine object
        - The BuildLine objects should have been created in 0044_auto_20230528_1410.py
    """

    BuildItem = apps.get_model("build", "BuildItem")
    BuildLine = apps.get_model("build", "BuildLine")

    # Find any existing BuildItem objects
    build_items = BuildItem.objects.all()

    n_missing = 0

    for item in build_items:
        # Find the relevant BuildLine object
        line = BuildLine.objects.filter(
            build=item.build, bom_item=item.bom_item
        ).first()

        if line is None:
            logger.warning(f"BuildLine does not exist for BuildItem {item.pk}")
            n_missing += 1

            if item.build is None or item.bom_item is None:
                continue

            # Create one!
            line = BuildLine.objects.create(
                build=item.build,
                bom_item=item.bom_item,
                quantity=item.bom_item.quantity * item.build.quantity,
            )

        # Link the BuildItem to the BuildLine
        # In the next data migration, we remove the 'build' and 'bom_item' fields from BuildItem
        item.build_line = line
        item.save()

    if build_items.count() > 0:
        logger.info(
            f"add_build_line_links: Updated {build_items.count()} BuildItem objects (added {n_missing})"
        )


def reverse_build_links(apps, schema_editor):
    """Reverse data migration from add_build_line_links

    Basically, iterate through each BuildItem and update the links based on the BuildLine
    """

    BuildItem = apps.get_model("build", "BuildItem")

    items = BuildItem.objects.all()

    for item in items:
        item.build = item.build_line.build
        item.bom_item = item.build_line.bom_item
        item.save()

    if items.count() > 0:
        logger.info(f"reverse_build_links: Updated {items.count()} BuildItem objects")


def get_bom_items_for_part(part, Part, BomItem):
    """Return a list of all BOM items for a given part.

    Note that we cannot use the ORM here (as we are inside a data migration),
    so we *copy* the logic from the Part class.

    This is a snapshot of the Part.get_bom_items() method as of 2023-05-29
    """

    bom_items = set()

    # Get all BOM items which directly reference the part
    for bom_item in BomItem.objects.filter(part=part):
        bom_items.add(bom_item)

    # Get all BOM items which are inherited by the part
    parents = Part.objects.filter(
        tree_id=part.tree_id, level__lt=part.level, lft__lt=part.lft, rght__gt=part.rght
    )

    for bom_item in BomItem.objects.filter(part__in=parents, inherited=True):
        bom_items.add(bom_item)

    return list(bom_items)


def add_lines_to_builds(apps, schema_editor):
    """Create BuildOrderLine objects for existing build orders"""

    # Get database models
    Build = apps.get_model("build", "Build")
    BuildLine = apps.get_model("build", "BuildLine")

    Part = apps.get_model("part", "Part")
    BomItem = apps.get_model("part", "BomItem")

    build_lines = []

    builds = Build.objects.all()

    if builds.count() > 0:
        print(f"Creating BuildOrderLine objects for {builds.count()} existing builds")

    for build in builds:
        # Create a BuildOrderLine for each BuildItem

        bom_items = get_bom_items_for_part(build.part, Part, BomItem)

        for item in bom_items:
            build_lines.append(
                BuildLine(
                    build=build,
                    bom_item=item,
                    quantity=item.quantity * build.quantity,
                )
            )

    if len(build_lines) > 0:
        # Construct the new BuildLine objects
        BuildLine.objects.bulk_create(build_lines)
        print(f"Created {len(build_lines)} BuildOrderLine objects for existing builds")


def remove_build_lines(apps, schema_editor):
    """Remove BuildOrderLine objects from the database"""

    # Get database models
    BuildLine = apps.get_model("build", "BuildLine")

    n = BuildLine.objects.all().count()

    BuildLine.objects.all().delete()

    if n > 0:
        print(f"Removed {n} BuildOrderLine objects")

def forward(apps, schema_editor):
    """Find and delete any BuildItem instances which have a null BuildLine field."""

    BuildItem = apps.get_model("build", "BuildItem")

    items = BuildItem.objects.filter(build_line=None)

    if items.count() > 0:
        print(f"Deleting {items.count()} BuildItem objects with null BuildLine field")
        items.delete()

class Migration(migrations.Migration):

    replaces = [('build', '0043_buildline'), ('build', '0044_auto_20230528_1410'), ('build', '0045_builditem_build_line'), ('build', '0046_auto_20230606_1033'), ('build', '0047_auto_20230606_1058'), ('build', '0048_build_project_code'), ('build', '0049_alter_builditem_build_line'), ('build', '0050_auto_20240508_0138')]

    dependencies = [
        ('part', '0109_auto_20230517_1048'),
        ('build', '0042_alter_build_notes'),
        ('stock', '0101_stockitemtestresult_metadata'),
        ('common', '0019_projectcode_metadata'),
    ]

    operations = [
        migrations.CreateModel(
            name='BuildLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=5, default=1, help_text='Required quantity for build order', max_digits=15, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quantity')),
                ('bom_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='build_lines', to='part.bomitem')),
                ('build', models.ForeignKey(help_text='Build object', on_delete=django.db.models.deletion.CASCADE, related_name='build_lines', to='build.build')),
            ],
            options={
                'unique_together': {('build', 'bom_item')},
                'verbose_name': 'Build Order Line Item',
            },
        ),
        migrations.RunPython(
            code=add_lines_to_builds,
            reverse_code=remove_build_lines,
        ),
        migrations.AddField(
            model_name='builditem',
            name='build_line',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='allocations', to='build.buildline'),
        ),
        migrations.RunPython(
            code=add_build_line_links,
            reverse_code=reverse_build_links,
        ),
        migrations.AlterUniqueTogether(
            name='builditem',
            unique_together={('build_line', 'stock_item', 'install_into')},
        ),
        migrations.RemoveField(
            model_name='builditem',
            name='bom_item',
        ),
        migrations.RemoveField(
            model_name='builditem',
            name='build',
        ),
        migrations.AddField(
            model_name='build',
            name='project_code',
            field=models.ForeignKey(blank=True, help_text='Project code for this build order', null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.projectcode', verbose_name='Project Code'),
        ),
        migrations.AlterField(
            model_name='builditem',
            name='build_line',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='build.buildline'),
        ),
        migrations.RunPython(
            code=forward,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
    ]
