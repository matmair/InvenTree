# Generated by Django 4.2.17 on 2025-01-04 13:29

import common.currency
import common.icons
import django.core.validators
import django.db.migrations.operations.special
import django.db.models.deletion
import djmoney.models.fields
import djmoney.models.validators
import stdimage.models
import taggit.managers
from django.conf import settings
from django.db import migrations, models

import InvenTree.fields
import InvenTree.validators
import part.migrations._fnc
import part.models


def migrate_part_responsible_owner(apps, schema_editor):
    """Copy existing part.responsible field to part.responsible_owner"""

    Owner = apps.get_model("users", "Owner")
    Part = apps.get_model("part", "Part")
    User = apps.get_model("auth", "user")
    ContentType = apps.get_model("contenttypes", "contenttype")

    user_type = ContentType.objects.get_for_model(User)

    parts = Part.objects.exclude(responsible=None)

    for part in parts:
        # Find a corresponding Owner object, or create one if it does not exist
        owner, _created = Owner.objects.get_or_create(
            owner_type=user_type,
            owner_id=part.responsible.id,
        )

        part.responsible_owner = owner
        part.save()

    if parts.count() > 0:
        print(f"Added 'responsible_owner' for {parts.count()} parts")


def reverse_owner_migration(apps, schema_editor):
    """Reverse the owner migration:

    - Set the 'responsible' field to a selected user
    - Only where 'responsible_owner' is set
    - Only where 'responsible_owner' is a User object
    """

    Part = apps.get_model("part", "Part")
    User = apps.get_model("auth", "user")
    ContentType = apps.get_model("contenttypes", "contenttype")

    user_type = ContentType.objects.get_for_model(User)

    parts = Part.objects.exclude(responsible_owner=None)

    for part in parts:
        if part.responsible_owner.owner_type == user_type:
            # Attempt to find matching user
            try:
                user = User.objects.get(pk=part.responsible_owner.owner_id)
                part.responsible = user
                part.save()
            except User.DoesNotExist:
                print("User does not exist:", part.responsible_owner.owner_id)

    if parts.count() > 0:
        print(f"Added 'responsible' for {parts.count()} parts")


def set_key(apps, schema_editor):
    """Create a 'key' value for existing PartTestTemplate objects."""

    import InvenTree.helpers

    PartTestTemplate = apps.get_model("part", "PartTestTemplate")

    for template in PartTestTemplate.objects.all():
        template.key = InvenTree.helpers.generateTestKey(
            str(template.test_name).strip()
        )
        template.save()

    if PartTestTemplate.objects.count() > 0:
        print(
            f"\nUpdated 'key' value for {PartTestTemplate.objects.count()} PartTestTemplate objects"
        )


def set_testable(apps, schema_editor):
    """Set the 'testable' status to True for certain parts.

    Prior to migration part.0128, the 'trackable' attribute
    was used to determine if parts could have tests associated with them.

    However, 'trackable' comes with other restrictions
    (such as requiring a unique serial number).

    So, we have added a new field 'testable' to the Part model,
    which is updated in this migration to match the value of the 'trackable' field.
    """

    Part = apps.get_model("part", "Part")

    # By default, 'testable' is False - so we only need to update parts marked as 'trackable'
    trackable_parts = Part.objects.filter(trackable=True)

    if trackable_parts.count() > 0:
        print(f"\nMarking {trackable_parts.count()} Part objects as 'testable'")
        trackable_parts.update(testable=True)


class Migration(migrations.Migration):
    replaces = [
        ("part", "0065_auto_20210505_2144"),
        ("part", "0066_bomitem_allow_variants"),
        ("part", "0067_partinternalpricebreak"),
        ("part", "0068_part_unique_part"),
        ("part", "0069_auto_20210701_0509"),
        ("part", "0070_alter_part_variant_of"),
        ("part", "0071_alter_partparametertemplate_name"),
        ("part", "0072_bomitemsubstitute"),
        ("part", "0073_auto_20211013_1048"),
        ("part", "0074_partcategorystar"),
        ("part", "0075_auto_20211128_0151"),
        ("part", "0076_auto_20220516_0819"),
        ("part", "0077_alter_bomitem_unique_together"),
        ("part", "0078_auto_20220606_0024"),
        ("part", "0079_alter_part_notes"),
        ("part", "0080_alter_part_image"),
        ("part", "0081_alter_partcategory_name"),
        ("part", "0082_partcategory_pathstring"),
        ("part", "0083_auto_20220731_2357"),
        ("part", "0084_partcategory_icon"),
        ("part", "0085_partparametertemplate_description"),
        ("part", "0086_auto_20220912_0007"),
        ("part", "0087_bomitem_consumable"),
        ("part", "0088_alter_partparametertemplate_name"),
        ("part", "0089_auto_20221112_0128"),
        ("part", "0090_auto_20221115_0816"),
        ("part", "0091_partstocktake"),
        ("part", "0092_part_last_stocktake"),
        ("part", "0093_auto_20230115_1404"),
        ("part", "0094_alter_part_units"),
        ("part", "0095_alter_part_responsible"),
        ("part", "0096_auto_20230211_0029"),
        ("part", "0097_partstocktakereport"),
        ("part", "0098_auto_20230214_1115"),
        ("part", "0099_alter_bomitem_inherited"),
        ("part", "0100_alter_bomitem_reference"),
        ("part", "0101_bomitem_validated"),
        ("part", "0102_auto_20230314_0112"),
        ("part", "0103_auto_20230317_0816"),
        ("part", "0104_alter_part_description"),
        ("part", "0105_alter_part_notes"),
        ("part", "0106_part_tags"),
        ("part", "0107_alter_part_tags"),
        ("part", "0108_auto_20230516_1334"),
        ("part", "0109_auto_20230517_1048"),
        ("part", "0110_alter_part_units"),
        ("part", "0111_auto_20230521_1350"),
        ("part", "0112_auto_20230525_1606"),
        ("part", "0113_auto_20230531_1205"),
        ("part", "0114_alter_part_minimum_stock"),
        ("part", "0115_part_responsible_owner"),
        ("part", "0116_auto_20231023_0332"),
        ("part", "0117_remove_part_responsible"),
        ("part", "0118_auto_20231024_1844"),
        ("part", "0119_auto_20231120_0457"),
        ("part", "0120_parttesttemplate_key"),
        ("part", "0121_auto_20240207_0344"),
        ("part", "0122_parttesttemplate_enabled"),
        ("part", "0123_parttesttemplate_choices"),
        ("part", "0124_delete_partattachment"),
        ("part", "0125_part_locked"),
        ("part", "0126_part_revision_of"),
        ("part", "0127_remove_partcategory_icon_partcategory__icon"),
        ("part", "0128_part_testable"),
        ("part", "0129_auto_20240815_0214"),
        ("part", "0130_alter_parttesttemplate_part"),
        ("part", "0131_partrelated_note"),
        ("part", "0132_partparametertemplate_selectionlist"),
    ]

    dependencies = [
        ("users", "0005_owner_model"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("company", "0069_company_active"),
        ("order", "0099_alter_salesorder_status"),
        ("common", "0032_selectionlist_selectionlistentry_and_more"),
        ("users", "0009_auto_20231020_2356"),
        ("build", "0050_auto_20240508_0138"),
        ("stock", "0110_alter_stockitemtestresult_finished_datetime_and_more"),
        ("part", "0064_auto_20210404_2016"),
        ("taggit", "0005_auto_20220424_2025"),
        ("common", "0026_auto_20240608_1238"),
    ]

    operations = [
        migrations.AddField(
            model_name="part",
            name="base_cost",
            field=models.DecimalField(
                decimal_places=3,
                default=0,
                help_text="Minimum charge (e.g. stocking fee)",
                max_digits=10,
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="base cost",
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="multiple",
            field=models.PositiveIntegerField(
                default=1,
                help_text="Sell multiple",
                validators=[django.core.validators.MinValueValidator(1)],
                verbose_name="multiple",
            ),
        ),
        migrations.AddField(
            model_name="bomitem",
            name="allow_variants",
            field=models.BooleanField(
                default=False,
                help_text="Stock items for variant parts can be used for this BOM item",
                verbose_name="Allow Variants",
            ),
        ),
        migrations.CreateModel(
            name="PartInternalPriceBreak",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    InvenTree.fields.RoundingDecimalField(
                        decimal_places=5,
                        default=1,
                        help_text="Price break quantity",
                        max_digits=15,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Quantity",
                    ),
                ),
                (
                    "price_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[
                            ("EUR", "Euro"),
                            ("AUD", "Australian Dollar"),
                            ("USD", "US Dollar"),
                            ("NZD", "New Zealand Dollar"),
                        ],
                        default="USD",
                        editable=False,
                        max_length=3,
                    ),
                ),
                (
                    "price",
                    djmoney.models.fields.MoneyField(
                        decimal_places=4,
                        default_currency="USD",
                        help_text="Unit price at specified quantity",
                        max_digits=19,
                        null=True,
                        verbose_name="Price",
                    ),
                ),
                (
                    "part",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="internalpricebreaks",
                        to="part.part",
                        verbose_name="Part",
                    ),
                ),
            ],
            options={
                "unique_together": {("part", "quantity")},
            },
        ),
        migrations.AddConstraint(
            model_name="part",
            constraint=models.UniqueConstraint(
                fields=("name", "IPN", "revision"), name="unique_part"
            ),
        ),
        migrations.AlterField(
            model_name="partsellpricebreak",
            name="price",
            field=InvenTree.fields.InvenTreeModelMoneyField(
                currency_choices=[],
                decimal_places=4,
                default_currency="",
                help_text="Unit price at specified quantity",
                max_digits=19,
                null=True,
                validators=[djmoney.models.validators.MinMoneyValidator(0)],
                verbose_name="Price",
            ),
        ),
        migrations.AlterField(
            model_name="part",
            name="variant_of",
            field=models.ForeignKey(
                blank=True,
                help_text="Is this part a variant of another part?",
                limit_choices_to={"is_template": True},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="variants",
                to="part.part",
                verbose_name="Variant Of",
            ),
        ),
        migrations.AlterField(
            model_name="partparametertemplate",
            name="name",
            field=models.CharField(
                help_text="Parameter Name",
                max_length=100,
                unique=True,
                validators=[part.models.validate_template_name],
                verbose_name="Name",
            ),
        ),
        migrations.AddField(
            model_name="partattachment",
            name="link",
            field=InvenTree.fields.InvenTreeURLField(
                blank=True,
                help_text="Link to external URL",
                null=True,
                verbose_name="Link",
            ),
        ),
        migrations.AlterField(
            model_name="partattachment",
            name="attachment",
            field=models.FileField(
                blank=True,
                help_text="Select file to attach",
                null=True,
                upload_to="attachments",
                verbose_name="Attachment",
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AddField(
            model_name="partcategory",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="bomitem",
            unique_together=set(),
        ),
        migrations.AlterField(
            model_name="partrelated",
            name="part_1",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="related_parts_1",
                to="part.part",
                verbose_name="Part 1",
            ),
        ),
        migrations.AlterField(
            model_name="partrelated",
            name="part_2",
            field=models.ForeignKey(
                help_text="Select Related Part",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="related_parts_2",
                to="part.part",
                verbose_name="Part 2",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="partrelated",
            unique_together={("part_1", "part_2")},
        ),
        migrations.AlterField(
            model_name="part",
            name="notes",
            field=InvenTree.fields.InvenTreeNotesField(
                blank=True,
                help_text="Part notes",
                max_length=50000,
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AlterField(
            model_name="part",
            name="image",
            field=stdimage.models.StdImageField(
                blank=True,
                force_min_size=False,
                null=True,
                upload_to=part.models.rename_part_image,
                variations={"preview": (256, 256), "thumbnail": (128, 128)},
                verbose_name="Image",
            ),
        ),
        migrations.AlterField(
            model_name="partcategory",
            name="name",
            field=models.CharField(
                help_text="Name", max_length=100, verbose_name="Name"
            ),
        ),
        migrations.AddField(
            model_name="partcategory",
            name="pathstring",
            field=models.CharField(
                blank=True, help_text="Path", max_length=250, verbose_name="Path"
            ),
        ),
        migrations.AlterField(
            model_name="partinternalpricebreak",
            name="price",
            field=InvenTree.fields.InvenTreeModelMoneyField(
                currency_choices=[],
                decimal_places=4,
                default_currency="",
                help_text="Unit price at specified quantity",
                max_digits=19,
                null=True,
                validators=[djmoney.models.validators.MinMoneyValidator(0)],
                verbose_name="Price",
            ),
        ),
        migrations.AddField(
            model_name="partcategory",
            name="icon",
            field=models.CharField(
                blank=True,
                help_text="Icon (optional)",
                max_length=100,
                verbose_name="Icon",
            ),
        ),
        migrations.AddField(
            model_name="partparametertemplate",
            name="description",
            field=models.CharField(
                blank=True,
                help_text="Parameter description",
                max_length=250,
                verbose_name="Description",
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="barcode_data",
            field=models.CharField(
                blank=True,
                help_text="Third party barcode data",
                max_length=500,
                verbose_name="Barcode Data",
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="barcode_hash",
            field=models.CharField(
                blank=True,
                help_text="Unique hash of barcode data",
                max_length=128,
                verbose_name="Barcode Hash",
            ),
        ),
        migrations.AddField(
            model_name="bomitem",
            name="consumable",
            field=models.BooleanField(
                default=False,
                help_text="This BOM item is consumable (it is not tracked in build orders)",
                verbose_name="Consumable",
            ),
        ),
        migrations.AlterField(
            model_name="partparametertemplate",
            name="name",
            field=models.CharField(
                help_text="Parameter Name",
                max_length=100,
                unique=True,
                verbose_name="Name",
            ),
        ),
        migrations.AlterField(
            model_name="part",
            name="base_cost",
            field=models.DecimalField(
                decimal_places=6,
                default=0,
                help_text="Minimum charge (e.g. stocking fee)",
                max_digits=19,
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="base cost",
            ),
        ),
        migrations.AlterField(
            model_name="partinternalpricebreak",
            name="price",
            field=InvenTree.fields.InvenTreeModelMoneyField(
                currency_choices=[],
                decimal_places=6,
                default_currency="",
                help_text="Unit price at specified quantity",
                max_digits=19,
                null=True,
                validators=[djmoney.models.validators.MinMoneyValidator(0)],
                verbose_name="Price",
            ),
        ),
        migrations.AlterField(
            model_name="partsellpricebreak",
            name="price",
            field=InvenTree.fields.InvenTreeModelMoneyField(
                currency_choices=[],
                decimal_places=6,
                default_currency="",
                help_text="Unit price at specified quantity",
                max_digits=19,
                null=True,
                validators=[djmoney.models.validators.MinMoneyValidator(0)],
                verbose_name="Price",
            ),
        ),
        migrations.AddField(
            model_name="partcategory",
            name="structural",
            field=models.BooleanField(
                default=False,
                help_text="Parts may not be directly assigned to a structural category, but may be assigned to child categories.",
                verbose_name="Structural",
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="last_stocktake",
            field=models.DateField(
                blank=True, null=True, verbose_name="Last Stocktake"
            ),
        ),
        migrations.AddField(
            model_name="partinternalpricebreak",
            name="updated",
            field=models.DateTimeField(
                auto_now=True,
                help_text="Timestamp of last update",
                null=True,
                verbose_name="Updated",
            ),
        ),
        migrations.AddField(
            model_name="partsellpricebreak",
            name="updated",
            field=models.DateTimeField(
                auto_now=True,
                help_text="Timestamp of last update",
                null=True,
                verbose_name="Updated",
            ),
        ),
        migrations.CreateModel(
            name="PartPricing",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[
                            ("EUR", "Euro"),
                            ("AUD", "Australian Dollar"),
                            ("USD", "US Dollar"),
                            ("NZD", "New Zealand Dollar"),
                        ],
                        default=common.currency.currency_code_default,
                        help_text="Currency used to cache pricing calculations",
                        max_length=10,
                        verbose_name="Currency",
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp of last update",
                        null=True,
                        verbose_name="Updated",
                    ),
                ),
                ("scheduled_for_update", models.BooleanField(default=False)),
                (
                    "bom_cost_min_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "bom_cost_min",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Minimum cost of component parts",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Minimum BOM Cost",
                    ),
                ),
                (
                    "bom_cost_max_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "bom_cost_max",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Maximum cost of component parts",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Maximum BOM Cost",
                    ),
                ),
                (
                    "purchase_cost_min_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "purchase_cost_min",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Minimum historical purchase cost",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Minimum Purchase Cost",
                    ),
                ),
                (
                    "purchase_cost_max_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "purchase_cost_max",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Maximum historical purchase cost",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Maximum Purchase Cost",
                    ),
                ),
                (
                    "internal_cost_min_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "internal_cost_min",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Minimum cost based on internal price breaks",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Minimum Internal Price",
                    ),
                ),
                (
                    "internal_cost_max_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "internal_cost_max",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Maximum cost based on internal price breaks",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Maximum Internal Price",
                    ),
                ),
                (
                    "supplier_price_min_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "supplier_price_min",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Minimum price of part from external suppliers",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Minimum Supplier Price",
                    ),
                ),
                (
                    "supplier_price_max_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "supplier_price_max",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Maximum price of part from external suppliers",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Maximum Supplier Price",
                    ),
                ),
                (
                    "variant_cost_min_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "variant_cost_min",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Calculated minimum cost of variant parts",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Minimum Variant Cost",
                    ),
                ),
                (
                    "variant_cost_max_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "variant_cost_max",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Calculated maximum cost of variant parts",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Maximum Variant Cost",
                    ),
                ),
                (
                    "overall_min_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "overall_min",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Calculated overall minimum cost",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Minimum Cost",
                    ),
                ),
                (
                    "overall_max_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "overall_max",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Calculated overall maximum cost",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Maximum Cost",
                    ),
                ),
                (
                    "sale_price_min_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "sale_price_min",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Minimum sale price based on price breaks",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Minimum Sale Price",
                    ),
                ),
                (
                    "sale_price_max_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "sale_price_max",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Maximum sale price based on price breaks",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Maximum Sale Price",
                    ),
                ),
                (
                    "sale_history_min_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "sale_history_min",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Minimum historical sale price",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Minimum Sale Cost",
                    ),
                ),
                (
                    "sale_history_max_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "sale_history_max",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Maximum historical sale price",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Maximum Sale Cost",
                    ),
                ),
                (
                    "part",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pricing_data",
                        to="part.part",
                        verbose_name="Part",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="part",
            name="units",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Units of measure for this part",
                max_length=20,
                null=True,
                verbose_name="Units",
            ),
        ),
        migrations.AlterField(
            model_name="part",
            name="responsible",
            field=models.ForeignKey(
                blank=True,
                help_text="User responsible for this part",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="parts_responible",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Responsible",
            ),
        ),
        migrations.CreateModel(
            name="PartStocktake",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=5,
                        help_text="Total available stock at time of stocktake",
                        max_digits=19,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Quantity",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        auto_now_add=True,
                        help_text="Date stocktake was performed",
                        verbose_name="Date",
                    ),
                ),
                (
                    "note",
                    models.CharField(
                        blank=True,
                        help_text="Additional notes",
                        max_length=250,
                        verbose_name="Notes",
                    ),
                ),
                (
                    "part",
                    models.ForeignKey(
                        help_text="Part for stocktake",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stocktakes",
                        to="part.part",
                        verbose_name="Part",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who performed this stocktake",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="part_stocktakes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
                (
                    "cost_max",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Estimated maximum cost of stock on hand",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Maximum Stock Cost",
                    ),
                ),
                (
                    "cost_max_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "cost_min",
                    InvenTree.fields.InvenTreeModelMoneyField(
                        blank=True,
                        currency_choices=[],
                        decimal_places=6,
                        default_currency="",
                        help_text="Estimated minimum cost of stock on hand",
                        max_digits=19,
                        null=True,
                        validators=[djmoney.models.validators.MinMoneyValidator(0)],
                        verbose_name="Minimum Stock Cost",
                    ),
                ),
                (
                    "cost_min_currency",
                    djmoney.models.fields.CurrencyField(
                        choices=[], default="", editable=False, max_length=3
                    ),
                ),
                (
                    "item_count",
                    models.IntegerField(
                        default=1,
                        help_text="Number of individual stock entries at time of stocktake",
                        verbose_name="Item Count",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PartStocktakeReport",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(auto_now_add=True, verbose_name="Date")),
                (
                    "report",
                    models.FileField(
                        help_text="Stocktake report file (generated internally)",
                        upload_to=part.models.save_stocktake_report,
                        verbose_name="Report",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who requested this stocktake report",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="stocktake_reports",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
                (
                    "part_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of parts covered by stocktake",
                        verbose_name="Part Count",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="bomitem",
            name="inherited",
            field=models.BooleanField(
                default=False,
                help_text="This BOM item is inherited by BOMs for variant parts",
                verbose_name="Gets inherited",
            ),
        ),
        migrations.AlterField(
            model_name="bomitem",
            name="reference",
            field=models.CharField(
                blank=True,
                help_text="BOM item reference",
                max_length=5000,
                verbose_name="Reference",
            ),
        ),
        migrations.AddField(
            model_name="bomitem",
            name="validated",
            field=models.BooleanField(
                default=False,
                help_text="This BOM item has been validated",
                verbose_name="Validated",
            ),
        ),
        migrations.AlterField(
            model_name="partinternalpricebreak",
            name="price_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3
            ),
        ),
        migrations.AddField(
            model_name="bomitem",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AddField(
            model_name="partparametertemplate",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AlterField(
            model_name="part",
            name="description",
            field=models.CharField(
                blank=True,
                help_text="Part description (optional)",
                max_length=250,
                verbose_name="Description",
            ),
        ),
        migrations.AlterField(
            model_name="part",
            name="notes",
            field=InvenTree.fields.InvenTreeNotesField(
                blank=True,
                help_text="Markdown notes (optional)",
                max_length=50000,
                null=True,
                verbose_name="Notes",
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="tags",
            field=taggit.managers.TaggableManager(
                blank=True,
                help_text="A comma-separated list of tags.",
                through="taggit.TaggedItem",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="partparameter",
            name="data_numeric",
            field=models.FloatField(blank=True, default=None, null=True),
        ),
        migrations.AlterField(
            model_name="partparameter",
            name="data",
            field=models.CharField(
                help_text="Parameter Value",
                max_length=500,
                validators=[django.core.validators.MinLengthValidator(1)],
                verbose_name="Data",
            ),
        ),
        migrations.AlterField(
            model_name="partparametertemplate",
            name="units",
            field=models.CharField(
                blank=True,
                help_text="Physical units for this parameter",
                max_length=25,
                validators=[InvenTree.validators.validate_physical_units],
                verbose_name="Units",
            ),
        ),
        migrations.AlterField(
            model_name="partsellpricebreak",
            name="price_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3
            ),
        ),
        migrations.AlterField(
            model_name="part",
            name="units",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Units of measure for this part",
                max_length=20,
                null=True,
                validators=[InvenTree.validators.validate_physical_units],
                verbose_name="Units",
            ),
        ),
        migrations.CreateModel(
            name="PartCategoryStar",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="starred_users",
                        to="part.partcategory",
                        verbose_name="Category",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="starred_categories",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "unique_together": {("category", "user")},
            },
        ),
        part.migrations._fnc.RemoveFieldOrSkip(
            model_name="partparametertemplate",
            name="checkbox",
        ),
        part.migrations._fnc.RemoveFieldOrSkip(
            model_name="partparametertemplate",
            name="choices",
        ),
        part.migrations._fnc.AddFieldOrSkip(
            model_name="partparametertemplate",
            name="checkbox",
            field=models.BooleanField(
                default=False,
                help_text="Is this parameter a checkbox?",
                verbose_name="Checkbox",
            ),
        ),
        part.migrations._fnc.AddFieldOrSkip(
            model_name="partparametertemplate",
            name="choices",
            field=models.CharField(
                blank=True,
                help_text="Valid choices for this parameter (comma-separated)",
                max_length=5000,
                verbose_name="Choices",
            ),
        ),
        migrations.CreateModel(
            name="BomItemSubstitute",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "bom_item",
                    models.ForeignKey(
                        help_text="Parent BOM item",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitutes",
                        to="part.bomitem",
                        verbose_name="BOM Item",
                    ),
                ),
                (
                    "part",
                    models.ForeignKey(
                        help_text="Substitute part",
                        limit_choices_to={"component": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitute_items",
                        to="part.part",
                        verbose_name="Part",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="JSON metadata field, for use by external plugins",
                        null=True,
                        verbose_name="Plugin Metadata",
                    ),
                ),
            ],
            options={
                "verbose_name": "BOM Item Substitute",
                "unique_together": {("part", "bom_item")},
            },
        ),
        migrations.AddField(
            model_name="partcategoryparametertemplate",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AddField(
            model_name="partparameter",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AddField(
            model_name="partrelated",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AddField(
            model_name="parttesttemplate",
            name="metadata",
            field=models.JSONField(
                blank=True,
                help_text="JSON metadata field, for use by external plugins",
                null=True,
                verbose_name="Plugin Metadata",
            ),
        ),
        migrations.AlterField(
            model_name="part",
            name="minimum_stock",
            field=models.DecimalField(
                decimal_places=6,
                default=0,
                help_text="Minimum allowed stock level",
                max_digits=19,
                validators=[django.core.validators.MinValueValidator(0)],
                verbose_name="Minimum Stock",
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="responsible_owner",
            field=models.ForeignKey(
                blank=True,
                help_text="Owner responsible for this part",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="parts_responsible",
                to="users.owner",
                verbose_name="Responsible",
            ),
        ),
        migrations.RunPython(
            code=migrate_part_responsible_owner,
            reverse_code=reverse_owner_migration,
        ),
        migrations.RemoveField(
            model_name="part",
            name="responsible",
        ),
        migrations.AlterField(
            model_name="partinternalpricebreak",
            name="price_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="bom_cost_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="bom_cost_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="internal_cost_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="internal_cost_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="overall_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="overall_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="purchase_cost_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="purchase_cost_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="sale_history_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="sale_history_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="sale_price_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="sale_price_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="supplier_price_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="supplier_price_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="variant_cost_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partpricing",
            name="variant_cost_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partsellpricebreak",
            name="price_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partstocktake",
            name="cost_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AlterField(
            model_name="partstocktake",
            name="cost_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AddField(
            model_name="partpricing",
            name="override_max",
            field=InvenTree.fields.InvenTreeModelMoneyField(
                blank=True,
                currency_choices=[],
                decimal_places=6,
                default_currency="",
                help_text="Override maximum cost",
                max_digits=19,
                null=True,
                validators=[djmoney.models.validators.MinMoneyValidator(0)],
                verbose_name="Maximum Cost",
            ),
        ),
        migrations.AddField(
            model_name="partpricing",
            name="override_max_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AddField(
            model_name="partpricing",
            name="override_min",
            field=InvenTree.fields.InvenTreeModelMoneyField(
                blank=True,
                currency_choices=[],
                decimal_places=6,
                default_currency="",
                help_text="Override minimum cost",
                max_digits=19,
                null=True,
                validators=[djmoney.models.validators.MinMoneyValidator(0)],
                verbose_name="Minimum Cost",
            ),
        ),
        migrations.AddField(
            model_name="partpricing",
            name="override_min_currency",
            field=djmoney.models.fields.CurrencyField(
                choices=[], default="", editable=False, max_length=3, null=True
            ),
        ),
        migrations.AddField(
            model_name="parttesttemplate",
            name="key",
            field=models.CharField(
                blank=True,
                help_text="Simplified key for the test",
                max_length=100,
                verbose_name="Test Key",
            ),
        ),
        migrations.RunPython(
            code=set_key,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="parttesttemplate",
            name="enabled",
            field=models.BooleanField(
                default=True, help_text="Is this test enabled?", verbose_name="Enabled"
            ),
        ),
        migrations.AddField(
            model_name="parttesttemplate",
            name="choices",
            field=models.CharField(
                blank=True,
                help_text="Valid choices for this test (comma-separated)",
                max_length=5000,
                verbose_name="Choices",
            ),
        ),
        migrations.DeleteModel(
            name="PartAttachment",
        ),
        migrations.AddField(
            model_name="part",
            name="locked",
            field=models.BooleanField(
                default=False,
                help_text="Locked parts cannot be edited",
                verbose_name="Locked",
            ),
        ),
        migrations.AddField(
            model_name="part",
            name="revision_of",
            field=models.ForeignKey(
                blank=True,
                help_text="Is this part a revision of another part?",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="revisions",
                to="part.part",
                verbose_name="Revision Of",
            ),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RenameField(
                    model_name="partcategory",
                    old_name="icon",
                    new_name="_icon",
                ),
                migrations.AlterField(
                    model_name="partcategory",
                    name="_icon",
                    field=models.CharField(
                        blank=True,
                        db_column="icon",
                        help_text="Icon (optional)",
                        max_length=100,
                        validators=[common.icons.validate_icon],
                        verbose_name="Icon",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="part",
            name="testable",
            field=models.BooleanField(
                default=False,
                help_text="Can this part have test results recorded against it?",
                verbose_name="Testable",
            ),
        ),
        migrations.RunPython(
            code=set_testable,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="parttesttemplate",
            name="part",
            field=models.ForeignKey(
                limit_choices_to={"testable": True},
                on_delete=django.db.models.deletion.CASCADE,
                related_name="test_templates",
                to="part.part",
                verbose_name="Part",
            ),
        ),
        migrations.AddField(
            model_name="partrelated",
            name="note",
            field=models.CharField(
                blank=True,
                help_text="Note for this relationship",
                max_length=500,
                verbose_name="Note",
            ),
        ),
        migrations.AddField(
            model_name="partparametertemplate",
            name="selectionlist",
            field=models.ForeignKey(
                blank=True,
                help_text="Selection list for this parameter",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="parameter_templates",
                to="common.selectionlist",
                verbose_name="Selection List",
            ),
        ),
    ]
