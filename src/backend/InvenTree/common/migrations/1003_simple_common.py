# Generated by Django 4.2.17 on 2025-01-05 00:55

import django.db.migrations.operations.special
import django.db.models.deletion
import taggit.managers
from django.conf import settings
from django.db import migrations, models

import common.models
import common.validators
import InvenTree.fields
import InvenTree.models


class Migration(migrations.Migration):
    replaces = [
        ("common", "0025_attachment"),
        ("common", "0026_auto_20240608_1238"),
        ("common", "0027_alter_customunit_symbol"),
        ("common", "0028_colortheme_user_obj"),
        ("common", "0029_inventreecustomuserstatemodel"),
        ("common", "0030_barcodescanresult"),
        ("common", "0031_auto_20241026_0024"),
        ("common", "0032_selectionlist_selectionlistentry_and_more"),
        ("common", "0033_delete_colortheme"),
        ("common", "0034_alter_inventreecustomuserstatemodel_unique_together_and_more"),
    ]

    dependencies = [
        ("common", "0024_notesimage_model_id_notesimage_model_type"),
        ("part", "0123_parttesttemplate_choices"),
        ("build", "0050_auto_20240508_0138"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("company", "0069_company_active"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("plugin", "0009_alter_pluginconfig_key"),
        ("stock", "0110_alter_stockitemtestresult_finished_datetime_and_more"),
        ("order", "0099_alter_salesorder_status"),
    ]

    operations = [
        migrations.CreateModel(
            name="Attachment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_id", models.PositiveIntegerField()),
                (
                    "attachment",
                    models.FileField(
                        blank=True,
                        help_text="Select file to attach",
                        null=True,
                        upload_to=common.models.rename_attachment,
                        verbose_name="Attachment",
                    ),
                ),
                (
                    "link",
                    InvenTree.fields.InvenTreeURLField(
                        blank=True,
                        help_text="Link to external URL",
                        null=True,
                        verbose_name="Link",
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True,
                        help_text="Attachment comment",
                        max_length=250,
                        verbose_name="Comment",
                    ),
                ),
                (
                    "upload_date",
                    models.DateField(
                        auto_now_add=True,
                        help_text="Date the file was uploaded",
                        null=True,
                        verbose_name="Upload date",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="File size in bytes",
                        verbose_name="File size",
                    ),
                ),
                (
                    "model_type",
                    models.CharField(
                        help_text="Target model type for this image",
                        max_length=100,
                        validators=[common.validators.validate_attachment_model_type],
                    ),
                ),
                (
                    "upload_user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="JSON metadata field, for use by external plugins",
                        null=True,
                        verbose_name="Plugin Metadata",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attachment",
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.AlterField(
            model_name="customunit",
            name="symbol",
            field=models.CharField(
                blank=True,
                help_text="Optional unit symbol",
                max_length=10,
                verbose_name="Symbol",
            ),
        ),
        migrations.AddField(
            model_name="colortheme",
            name="user_obj",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="InvenTreeCustomUserStateModel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.IntegerField(
                        help_text="Value that will be saved in the models database",
                        verbose_name="Key",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the state",
                        max_length=250,
                        verbose_name="Name",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Label that will be displayed in the frontend",
                        max_length=250,
                        verbose_name="Label",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        choices=[
                            ("primary", "primary"),
                            ("secondary", "secondary"),
                            ("success", "success"),
                            ("danger", "danger"),
                            ("warning", "warning"),
                            ("info", "info"),
                            ("dark", "dark"),
                        ],
                        default="secondary",
                        help_text="Color that will be displayed in the frontend",
                        max_length=10,
                        verbose_name="Color",
                    ),
                ),
                (
                    "logical_key",
                    models.IntegerField(
                        help_text="State logical key that is equal to this custom state in business logic",
                        verbose_name="Logical Key",
                    ),
                ),
                (
                    "reference_status",
                    models.CharField(
                        help_text="Status set that is extended with this custom state",
                        max_length=250,
                        verbose_name="Reference Status Set",
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        blank=True,
                        help_text="Model this state is associated with",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                        verbose_name="Model",
                    ),
                ),
            ],
            options={
                "verbose_name": "Custom State",
                "verbose_name_plural": "Custom States",
                "unique_together": {
                    ("model", "reference_status", "key", "logical_key")
                },
            },
        ),
        migrations.CreateModel(
            name="BarcodeScanResult",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data",
                    models.CharField(
                        help_text="Barcode data", max_length=250, verbose_name="Data"
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time of the barcode scan",
                        verbose_name="Timestamp",
                    ),
                ),
                (
                    "endpoint",
                    models.CharField(
                        blank=True,
                        help_text="URL endpoint which processed the barcode",
                        max_length=250,
                        null=True,
                        verbose_name="Path",
                    ),
                ),
                (
                    "context",
                    models.JSONField(
                        blank=True,
                        help_text="Context data for the barcode scan",
                        max_length=1000,
                        null=True,
                        verbose_name="Context",
                    ),
                ),
                (
                    "response",
                    models.JSONField(
                        blank=True,
                        help_text="Response data from the barcode scan",
                        max_length=1000,
                        null=True,
                        verbose_name="Response",
                    ),
                ),
                (
                    "result",
                    models.BooleanField(
                        default=False,
                        help_text="Was the barcode scan successful?",
                        verbose_name="Result",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who scanned the barcode",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Barcode Scan",
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SelectionList",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="JSON metadata field, for use by external plugins",
                        null=True,
                        verbose_name="Plugin Metadata",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the selection list",
                        max_length=100,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description of the selection list",
                        max_length=250,
                        verbose_name="Description",
                    ),
                ),
                (
                    "locked",
                    models.BooleanField(
                        default=False,
                        help_text="Is this selection list locked?",
                        verbose_name="Locked",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Can this selection list be used?",
                        verbose_name="Active",
                    ),
                ),
                (
                    "source_string",
                    models.CharField(
                        blank=True,
                        help_text="Optional string identifying the source used for this list",
                        max_length=1000,
                        verbose_name="Source String",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time that the selection list was created",
                        verbose_name="Created",
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time that the selection list was last updated",
                        verbose_name="Last Updated",
                    ),
                ),
            ],
            options={
                "verbose_name": "Selection List",
                "verbose_name_plural": "Selection Lists",
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SelectionListEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="Value of the selection list entry",
                        max_length=255,
                        verbose_name="Value",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Label for the selection list entry",
                        max_length=255,
                        verbose_name="Label",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description of the selection list entry",
                        max_length=250,
                        verbose_name="Description",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Is this selection list entry active?",
                        verbose_name="Active",
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        blank=True,
                        help_text="Selection list to which this entry belongs",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entries",
                        to="common.selectionlist",
                        verbose_name="Selection List",
                    ),
                ),
            ],
            options={
                "verbose_name": "Selection List Entry",
                "verbose_name_plural": "Selection List Entries",
                "unique_together": {("list", "value")},
            },
        ),
        migrations.AddField(
            model_name="selectionlist",
            name="default",
            field=models.ForeignKey(
                blank=True,
                help_text="Default entry for this selection list",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="common.selectionlistentry",
                verbose_name="Default Entry",
            ),
        ),
        migrations.AddField(
            model_name="selectionlist",
            name="source_plugin",
            field=models.ForeignKey(
                blank=True,
                help_text="Plugin which provides the selection list",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="plugin.pluginconfig",
                verbose_name="Source Plugin",
            ),
        ),
        migrations.DeleteModel(
            name="ColorTheme",
        ),
        migrations.AlterUniqueTogether(
            name="inventreecustomuserstatemodel",
            unique_together=set(),
        ),
        migrations.AlterField(
            model_name="inventreecustomuserstatemodel",
            name="key",
            field=models.IntegerField(
                help_text="Numerical value that will be saved in the models database",
                verbose_name="Value",
            ),
        ),
        migrations.AlterField(
            model_name="inventreecustomuserstatemodel",
            name="name",
            field=models.CharField(
                help_text="Name of the state",
                max_length=250,
                validators=[
                    common.validators.validate_uppercase,
                    common.validators.validate_variable_string,
                ],
                verbose_name="Name",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="inventreecustomuserstatemodel",
            unique_together={("reference_status", "key"), ("reference_status", "name")},
        ),
    ]
